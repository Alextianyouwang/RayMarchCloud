
#pragma kernel CS_DrawSmoke

#include "UnityCG.cginc"
#include "HL_Utility.hlsl"
#include "HL_Noise.hlsl"

RWTexture2D<float4> _CloudColRT,_CloudMaskRT,_CloudDepthRT,_CloudAlphaRT;
Texture2D<float> _DepthTextureRT;
SamplerState sampler_DepthTextureRT;
float _ScreenWidth,_ScreenHeight;
float4x4 _CamInvProjection, _CamToWorld , _Unity_VP, _Unity_V;
float3 _CamPosWS;
float3 _LightDirection;

float _BlendFactor;


struct Sphere
{
    float3 center;
    float radius;
};
StructuredBuffer<Sphere> _SphereBuffer;
int _SphereCount;

static const float maxDist = 30;
static const float epsilon = 0.001;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 _origin, float3 _direction)
{
    Ray ray;
    ray.origin = _origin;
    ray.direction = _direction;
    return ray;
}
Ray ComputeCameraRay (float2 uv)
{
    
    float3 direction = mul (_CamInvProjection,float4 (uv,0,1)).xyz;
    direction = mul (_CamToWorld,float4 (direction,0)).xyz;
    direction = normalize(direction);
    return  CreateRay(_CamPosWS,direction);
}

struct SceneInfo
{
    float3 position;
    float3 normal;
    float rayDepth;
    int marchStep;
    float alpha;
    float3 lightCol;
};

SceneInfo CreateSceneInfo(float3 position, float3 normal, float rayDepth, int marchStep, float alpha,float3 lightCol)
{
    SceneInfo sceneInfo;
    sceneInfo.position = position;
    sceneInfo.normal = normal;
    sceneInfo.rayDepth = rayDepth;
    sceneInfo.marchStep = marchStep;
    sceneInfo.alpha = alpha;
    sceneInfo.lightCol = lightCol;
    return sceneInfo;
}

float Spheres (float3 pos)
{
    float globalDist = maxDist;
    
    for (int i = 0; i<_SphereCount; i ++)
    {
        const float localDist = distance(pos,_SphereBuffer[i].center) - _SphereBuffer[i].radius;
        globalDist = Blend(localDist,globalDist,_BlendFactor) ;
    }
    return globalDist;
}
float SDF (float3 pos)
{
    return  Spheres(pos);
}
float3 GetNormal(float3 pos)
{
    float2 e = float2(0,0.001);
    float x = SDF(pos + e.yxx);
    float y = SDF(pos + e.xyx);
    float z = SDF(pos + e.xxy);
    return normalize( float3 (x,y,z) - SDF(pos));
}

float RemapDensity( float3 position) 
{
    float distToCenter = 10000;
    for (int j = 0; j < _SphereCount; j++)
    {
        distToCenter = min(distToCenter, distance(position, _SphereBuffer[j].center));
    }
    return smoothstep(1.4, 0, distToCenter);
}

float SampleDensity(float3 position) 
{
    float density = fbm(position * 4) * 1;
    density += fbm(position * 10)*0.5;
    return density ;
}

float LightMarch(float3 position) 
{
    float totalDensity = 0;
    for (int i = 0; i < 5; i++) 
    {
        const float stepSize = 0.15;
        position += -_LightDirection * stepSize;
        const float density = SampleDensity(position) * RemapDensity(position) * stepSize;
        if (density < 0.0001)
            break;
        totalDensity +=  density;
    }
    return exp(-totalDensity *200);
}

void CalculateLighting(float step, float3 pos, inout float density, inout float transmittance, inout float lightEnergy)
{
    density += step * RemapDensity(pos) * SampleDensity(pos);
    transmittance *= exp(-density * 100 * step);
    lightEnergy += LightMarch(pos) * density * transmittance * 100 * step;
} 

SceneInfo RenderSceneInfo(float3 o, float3 d, float geoDepth)
{
    
    float hitDist = 0,throughDist  = 0;
                              
    int marchStep = 0;
    const float3 lightCol = float3 (1, 1, 0.8);
    const float3 extCol = float3 (0.2, 0.2, 0.3);
    const float pf = dot(d, -_Unity_V[2].xyz);
    while ( hitDist < maxDist)
    {
        marchStep ++;
        float3 throughPos = o + d * hitDist;
        const float distToObject =SDF(throughPos);
        if (distToObject <= epsilon)
        {
            const float3 hitPos = throughPos;
            const float3 newO = throughPos;
            float snappingOffset = 0;
            float density = 0;
            float transmittance = 1;
            float lightEnergy = 0;
            for (int i = 0 ; i< 50; i++)
            {
                const float stepSize = 0.15;
                if ((hitDist + throughDist) * pf + stepSize > geoDepth)
                {
                    snappingOffset = geoDepth-(hitDist + throughDist) * pf;
                    break;
                }
                if (transmittance <= 0.01)
                    break;
               
                throughPos = newO + d * throughDist;
                CalculateLighting(stepSize,throughPos, density,transmittance,lightEnergy);
                throughDist += stepSize;
            }

            throughPos += snappingOffset * d;
            CalculateLighting(snappingOffset,throughPos, density,transmittance,lightEnergy);
            const float3 col = lerp(extCol, lightCol, lightEnergy);
            return CreateSceneInfo(hitPos, -GetNormal(hitPos),SDF(_CamPosWS)>0? hitDist:-hitDist+0.001,marchStep, saturate(density * 50), col);
        }
        hitDist += distToObject;
    }
    return CreateSceneInfo(0,0,0,marchStep,0,extCol);
}


[numthreads(8,8,1)]
void CS_DrawSmoke(uint3 id : SV_DispatchThreadID)
{
    const float2 uv = float2 (id.x / _ScreenWidth, id.y / _ScreenHeight);
    const float geometryDepthNDC = _DepthTextureRT.SampleLevel(sampler_DepthTextureRT, uv, 0);
    const float geometryDepthVS = LinearEyeDepth(geometryDepthNDC);
    const Ray camRay = ComputeCameraRay(uv * 2 -1);
    const SceneInfo sceneInfo = RenderSceneInfo(camRay.origin,camRay.direction, geometryDepthVS);

    const float sceneAlpha = sceneInfo.alpha;
    float3 col = sceneInfo.lightCol;
    _CloudColRT[id.xy] =  float4 (col,sceneAlpha);
}
